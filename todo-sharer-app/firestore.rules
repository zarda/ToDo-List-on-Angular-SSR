rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Functions ---
    // Checks if a user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user is the owner of a given list.
    function isListOwner(listId) {
      return get(/databases/$(database)/documents/lists/$(listId)).data.ownerUid == request.auth.uid;
    }

    // Checks if the requesting user is a member (owner or collaborator) of a given list.
    function isListMember(listId) {
      let list = get(/databases/$(database)/documents/lists/$(listId));
      return isSignedIn() && (
        list.data.ownerUid == request.auth.uid || 
        request.auth.token.email in list.data.sharedWith
      );
    }

    // --- Collections ---
    match /users/{userId} {
      // Any authenticated user can read public profile data.
      allow read: if isSignedIn();

      // A user can only write to their own profile.
      allow write: if request.auth.uid == userId;
    }

    match /lists/{listId} {
      // A user can get a single list if they are a member.
      allow get: if isListMember(listId);

      // A user can query for lists they own or are shared with.
      // The client-side query must include a filter on 'ownerUid' or 'sharedWith'.
      allow list: if isSignedIn();

      // A user can create a list if they are signed in and are the designated owner.
      // We also validate the schema of the new list.
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid
                    && request.resource.data.name is string
                    && request.resource.data.sharedWith is map
                    && request.resource.data.sharedWith.size() == 0;

      // A list member can update the `sharedWith` field to add or remove collaborators.
      // Only the owner can change the list's name.
      allow update: if (isListOwner(listId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'sharedWith'])) ||
                    (isListMember(listId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['sharedWith']));

      // Only the list owner can delete it.
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;

      // --- Subcollections ---
      match /todos/{todoId} {
        // For single doc reads, a user must be a member of the parent list.
        allow get: if isListMember(listId);
        // For collection queries, we allow any authenticated user to query.
        // This is because security rules for queries cannot perform `get` operations
        // to check the parent list's permissions. The client-side query must
        // already be filtered to only request lists the user has access to.
        allow list: if isSignedIn();

        // A list member can create a todo.
        // We validate the schema of the new todo.
        allow create: if isListMember(listId)
                      && request.resource.data.text is string
                      && request.resource.data.completed == false
                      && request.resource.data.order is number;

        // A list member can update a todo.
        // We validate that only allowed fields can be changed.
        allow update: if isListMember(listId)
                      && request.resource.data.keys().hasOnly(['text', 'completed', 'order', 'dueDate', 'updatedAt', 'createdAt']);

        // A list member can delete a todo.
        allow delete: if isListMember(listId);
      }
    }
  }
}
