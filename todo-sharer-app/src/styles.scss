// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;
@include mat.core();

body {
  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);

  // Reset the user agent margin.
  margin: 0;
}

html {
  // Define the default light theme by calling `mat.define-theme` without any arguments.
  // This theme is then passed to `mat.theme` to generate the CSS variables.
  $light-theme: mat.define-theme();
  @include mat.theme($light-theme);
}

/* You can add global styles to this file, and also import other style files */

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

/* Animation for newly added items */
@keyframes flash {
  0% {
    background-color: var(--mat-sys-primary-container);
  }
  100% {
    background-color: transparent;
  }
}

.new-item-flash {
  animation: flash 1.5s ease-out;
}
